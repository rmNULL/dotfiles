# This file is sourced by all *interactive* bash shells on startup,
# including some apparently interactive shells such as scp and rcp
# that can't tolerate any output.  So make sure this doesn't display
# anything or bad things will happen !


# Test for an interactive shell.  There is no need to set anything
# past this point for scp and rcp, and it's important to refrain from
# outputting anything in those cases.
if [[ $- != *i* ]]
then
  # Shell is non-interactive.  Be done now!
  return
fi

# Don't execute commands when match fails
# shopt -s failglob

OS=$(uname -s)
OS_MAC=$([[ $OS = *Darwin* ]] && echo "true" || echo "false")

# overwrite duplicate history
HISTCONTROL=erasedups:ignorespace

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=4096
HISTFILESIZE=12288

if [[ -f ~/.bash_aliases ]]
then
  . ~/.bash_aliases
fi

x_running() {
  # don't check for x in MAC
  $OS_MAC && return 0;
  xhost >/dev/null 2>&1 ;
}

if command -v tmux >/dev/null
then
  if tmux has-session >/dev/null 2>&1
  then
    # attah only if its not attached
    [[ -z $TMUX ]] && tmux attach -d \; new-window "bash -c 'cd \"$PWD\"; ${SHELL:=bash}'"
  else
    x_running && tmux new
  fi
fi

PREV_ORG_PROMPT=""

gen_prompt() {
  ec="$?"
  history -a

  # kludge !!, as long as it works
  PS1=$(sed 's/^\\e\[41;37;1m [0-9]\+ \\e\[0m//' <<<"$PS1")

  if command -v git >/dev/null 2>/dev/null
  then
    branch="$(git branch --show-current 2>/dev/null)"
  fi


  if [[ $USER != "rmnull" ]]
  then
    user_prefix="\e[31;1m\u\e[0m @ \e[33;1m\h\e[0m"
  else
    user_prefix=""
  fi

  ORG_PROMPT="${user_prefix}: \e[47m\e[30m${branch:+${branch}}\e[0m \e[38;5;227m\w\e[0m\nâˆ« "

  if [[ -z $PREV_ORG_PROMPT ]]
  then
    PREV_ORG_PROMPT=$ORG_PROMPT
  fi

  # of course, this assumes other scripts don't make modifications to the
  # in the middle of PS1
  # dont overwrite prompt generated by other scripts
  # other scripts may have added additional info the prompt
  pre_diff="$(( ${#PS1} - ${#PREV_ORG_PROMPT} ))"

  if [[ $pre_diff -gt 0 ]]
  then
    PREFIX="${PS1:0:${pre_diff}}"
  else
    PREFIX=""
  fi

  SUFFIX="${PS1:$(( ${#PREFIX} + ${#PREV_ORG_PROMPT} ))}"


  PS1="${PREFIX}${ORG_PROMPT}${SUFFIX}"
  PREV_ORG_PROMPT=${ORG_PROMPT}

  if [[ $ec != "0" ]] ; then
    PS1="\e[41;37;1m $ec \e[0m${PS1}"
  fi
}

if command -v nvim >/dev/null
then
  export EDITOR=nvim
fi

if [[ -f ~/.fzf.bash ]]
then
  source ~/.fzf.bash
  FZF_CTRL_T_COMMAND='fd . -0'
  FZF_CTRL_T_OPTS='--read0'
fi

if command -v zoxide >/dev/null
then
  eval "$(zoxide init bash)"
fi

if ! $OS_MAC
then
  if ! x_running
  then
    startx
  fi
fi

## doesn't overwrite if dir already exists
mkdir -p "${TMPDIR:-/tmp}"/pids/
mpdstats_pid_file=""${TMPDIR:-/tmp}"/pids/beet.mpdstats"
if [[ -f $mpdstats_pid_file ]]
then
  pid=$(cat "$mpdstats_pid_file")
  if ! ps aux | grep "${pid}.*beet mpdstats$" | grep -v grep >/dev/null
  then
    rm "$mpdstats_pid_file"
  fi
fi

if ! [[ -f "$mpdstats_pid_file" ]]
then
  if beet mpdstats 2>/dev/null >&2 &
  then
    pid="$!"
    echo -n "$pid" >"$mpdstats_pid_file"
    disown $pid
  else
    echo "failed to start beet mpdstats"
  fi
fi


if [[ -f ~/.config/mpd/pid  ]]; then
  pid=$(cat ~/.config/mpd/pid)
  if ! ps aux | grep "${pid}.*mpd$" | grep -v grep >/dev/null; then
    mpd
  fi
else
  mpd
fi > /dev/null 2>/dev/null


if [[ -z "$PROMPT_COMMAND" ]]
then
  PROMPT_COMMAND=gen_prompt
else
  PROMPT_COMMAND="gen_prompt;${PROMPT_COMMAND}"
fi

# cure for ocd
bind -x '"\C-l":"tput bel"'

[[ -x /usr/libexec/java_home ]] && export JAVA_HOME=$(/usr/libexec/java_home -v 1.8)
[[ -f "${HOME}/.local/share/tessdata_best" ]] && export TESSDATA_PREFIX="/${HOME}/.local/share/tessdata_best"

[ -f "${GHCUP_INSTALL_BASE_PREFIX:=$HOME}/.ghcup/env" ] && source "${GHCUP_INSTALL_BASE_PREFIX:=$HOME}/.ghcup/env"
