append_var() {
  local var=$1
  shift

  eval "local V=\$$var"
  local ev=":$V:"

  case ":$V:" in
    *:"$1":*)
      # local pre=${path%%:"$1":*} post=${path#*:"$1":}
      # based on remove_path by `Soliton` from freenode#bash
      local pre=${ev%%:"$1":*}
      local post=${ev#*:"$1":}
      local V=${pre#:}:${post%:}

      ##
      eval "$var="\${$var:+$V:}$1""
      ;;
    *)
      # PATH="${PATH:+$PATH:}$1"
      eval "$var="\${$var:+$V:}$1""
  esac
}

prepend_var() {
  local var=$1
  shift
  eval "local V=\$$var"
  local ev=":$V:"

  case ":$V:" in
    *:"$1":*)
      # local pre=${path%%:"$1":*} post=${path#*:"$1":}
      # based on remove_path by `Soliton` from freenode#bash
      local pre=${ev%%:"$1":*}
      local post=${ev#*:"$1":}
      local V=${pre#:}:${post%:}

      ##
      eval "${var}="$1\${${var}:+:$V}""
      ;;
    *)
      # PATH="$1${PATH:+:$PATH}"
      eval "${var}="$1\${${var}:+:$V}""
  esac
}

# modified from /etc/profile
appendpath() {
  append_var "PATH" $1
}

prependpath() {
  prepend_var "PATH" $1
}

if ! [[ -d $HOME/bin ]]
then
  mkdir $HOME/bin
fi

if [[ -f /home/linuxbrew/.linuxbrew/bin/brew ]]
then
    eval $(/home/linuxbrew/.linuxbrew/bin/brew shellenv)
fi

appendpath "/opt/texlive/2019/bin/x86_64-linux"
appendpath $HOME/.local/bin/
[[ -d $HOME/.cargo/ ]] && prependpath $HOME/.cargo/bin
prependpath $HOME/bin/
# set +x

if command -v composer > /dev/null ; then
  appendpath "$(composer global config bin-dir --absolute --quiet)"
fi

if command -v ruby > /dev/null ; then
  GEMS_DIR="$(ruby -e 'puts Gem.user_dir')"
  appendpath $GEMS_DIR/bin
fi

export ANDROID_HOME=$HOME/Android/Sdk
appendpath $ANDROID_HOME/emulator
appendpath $ANDROID_HOME/tools
appendpath $ANDROID_HOME/tools/bin
appendpath $ANDROID_HOME/platform-tools


# original source:
#  http://sneakygcr.net/caged-python-how-to-set-up-a-scientific-python-stack-in-your-home-folder-without-going-insane.html
#
# Local Installs
# ==============
# This allows you to install programs into $HOME/local/someprogram
# for example, when I install node locally I install it like this:
#
#    ./configure --prefix=$HOME/local/node-v0.8.4
#    make
#    make install
#
# To uninstall a program, just rm -rf $HOME/local/someprogram
#
if [ -d $HOME/local ]; then
  for i in $HOME/local/* $HOME/local/`uname -m`/*; do
    [ -d $i/bin ] && prependpath "${i}/bin"
    [ -d $i/sbin ] && prependpath "${i}/sbin"
    [ -d $i/include ] && prepend_var "CPATH" "${i}/include"
    [ -d $i/lib ] && prepend_var "LD_LIBRARY_PATH" "${i}/lib"
    [ -d $i/lib ] && prepend_var "LD_RUN_PATH" "${i}/lib"
    [ -d $i/lib64 ] && prepend_var "LD_LIBRARY_PATH" "${i}/lib64"
    [ -d $i/lib64 ] && prepend_var "LD_RUN_PATH" "${i}/lib64"
    # uncomment the following if you use macintosh
    #  [ -d $i/lib ] && prependpath "DYLD_LIBRARY_PATH" "${i}/lib"
    [ -d $i/lib/pkgconfig ] && prepend_var "PKG_CONFIG_PATH" "${i}/lib/pkgconfig"
    [ -d $i/share/man ] && prepend_var "MANPATH" "${i}/share/man"
  done

    # strip trailing colons
    export LD_LIBRARY_PATH=${LD_LIBRARY_PATH%:}
    export LD_RUN_PATH=${LD_RUN_PATH%:}
    export PKG_CONFIG_PATH=${PKG_CONFIG_PATH%:}
fi

export PATH
unset prependpath
unset appendpath
unset append_var
unset prepend_var


# This file is sourced by bash for login shells.  The following line
# runs your .bashrc and is recommended by the bash info pages.
[[ -f ~/.bashrc ]] && source ~/.bashrc

export PYTHONDONTWRITEBYTECODE=1

export HOMEBREW_DEVELOPER=1
if [[ -n $OS ]] && [[ $OS = *Linux* ]]
then
	RUBY_DIR="/home/linuxbrew/.linuxbrew/opt/ruby@2.6"
	export HOMEBREW_RUBY_PATH="${RUBY_DIR}/bin/ruby"

	# HB_RUBY_LD_LIBRARY_PATH="${RUBY_DIR}/lib"
	# HB_RUBY_RUN_PATH="${RUBY_DIR}/lib"
	# HB_RUBY_CPATH="${RUBY_DIR}/include/ruby-2.6.0:${RUBY_DIR}/include/ruby-2.6.0/x86_64-linux"
	# HB_RUBY_PKG_CONFIG_PATH="${RUBY_DIR}/lib/pkgconfig"

	# export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}${LD_LIBRARY_PATH:+:}${HB_RUBY_LD_LIBRARY_PATH}"
	# export LD_RUN_PATH="${LD_RUN_PATH}${LD_RUN_PATH:+:}${HB_RUBY_RUN_PATH}"
	# export CPATH="${CPATH}${CPATH:+:}${HB_RUBY_CPATH}"

	# export LD_FLAGS="-L${RUBY_DIR}/lib"
	# export CPP_FLAGS="-I${RUBY_DIR}/include"
	# export PKG_CONFIG_PATH="${PKG_CONFIG_PATH}${PKG_CONFIG_PATH:+:}${HB_RUBY_PKG_CONFIG_PATH}"
fi

export GPG_TTY=$(tty)
