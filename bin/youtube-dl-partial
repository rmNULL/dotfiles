#!/usr/bin/env bash
set -e
for c in command ffmpeg youtube-dl
do
  \unalias "$c" 2>/dev/null || true
done

show_help() {
  cat <<HELP
Usage: youtube-dl-partial [-f youtube-dl-format] url from to

               from: time
                 to: time
  youtube-dl-format: argument passed to youtube-dl

  time
  =====
       3 = 3 seconds
      23 = 23 seconds
     3:9 = 3m 9s
    3:09 = 3m 9s
    3:29 = 3m 29s
   03:29 = 3m 29s
  22:5:9 = 22h 5m 9s
 15:3:20 = 15h 3m 20s

DISCLAIMER: undefined behaviour on playlist url

HELP
exit ${1:0}
}

human_time_to_sec() {
  # $1 = [hh:[mm:[ss]]]
  # examples: look show_help for examples

  # sample test move it outside before test (duh!)
  # for t in 0 59 -1 00:32 0a:40 59:32 5:32 0:42 : 288:53:02 9:3 15:3:2
  # do
  #   human_time_to_sec "$t" 2>/dev/null || echo "err: $t"
  # done
  # exit


  input_time="$1"
  parseable_time=$(echo "$1" | tr : '\n' | tac | tr '\n' :)
  IFS=":" read s m h <<<"$parseable_time"

  [[ -z "$s" ]] && s="0"
  [[ -z "$m" ]] && m="0"
  [[ -z "$h" ]] && h="0"

  # we can limit minute and second input to 0-5 here, but not doing it to
  # have a better error message below
  if ! [[ "$input_time" =~ ^([0-9]+:)?([0-9]?[0-9]:)?([0-9]?[0-9])?$ ]]
  then
    echo -e "Error: time must be a valid time format. Look examples below\n" >&2
    show_help 21 >&2
    return 21 # dead code
  fi

  # in case of leading zero, don't interpret as octal
  h="10#$h" m="10#$m" s="10#$s"


  if [[ "$s" -lt 0 ]] || [[ "$s" -gt 59 ]]
  then
    echo "err: '$1' seconds must be between 0 and 60" >&2
    return 21
  fi

  if [[ "$m" -lt 0 ]] || [[ "$m" -gt 59 ]]
  then
    echo "err: '$1' minute must be between 0 and 60" >&2
    return 21
  fi


  echo $(( (((h * 60) + m) * 60) + s ))
}

command -v ffmpeg >/dev/null 2>/dev/null
command -v youtube-dl >/dev/null 2>/dev/null

format=""
url=""
from=""
to=""

[[ $# -ne 3 ]] && [[ $# -ne 5 ]] && show_help

while [[ -n "$1" ]]
do
  case "$1" in
    -f)
      shift
      format="$1"
      ;;
    *)
      if [[ -z "$url" ]]
      then
        url="$1"
      elif [[ -z "$from" ]]
      then
        from="$1"
        start_time=$(human_time_to_sec "$from")
      else
        to="$1"
        end_time=$(human_time_to_sec "$to")
      fi
      ;;
  esac
  shift
done

[[ -z "$format" ]] && youtube-dl -F "$url"
while [[ -z "$format" ]]
do
  read -p "format>> " format
done

dl_url=$(youtube-dl -f "$format" --get-url "$url")
save_as=$(youtube-dl -f "$format" --get-filename "$url")
save_as="${save_as%%.*}-${from}-${to}.${save_as##*.}"


ffmpeg_ss="$start_time"
ffmpeg_t=$(( $end_time - $start_time ))

if [[ "$ffmpeg_t" -lt 1 ]]
then
  echo "end time must be > start time." 2>/dev/null
  exit 21
fi

ffmpeg -ss "$ffmpeg_ss" -i "$dl_url" -t "$ffmpeg_t" -c:v copy -c:a copy "$save_as" ||  exit 2
