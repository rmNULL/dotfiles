#!/usr/bin/env bash
set -eu
shopt -s extglob

cmd_available() {
    if ! command -v "$1" >/dev/null 2>&1
    then
        echo "$1 is not installed or not in path" >&2
        return 1
    fi
}
YT_DL_CMD=""
if cmd_available yt-dlp
then
    YT_DL_CMD="yt-dlp"
else cmd_available youtube-dl
    YT_DL_CMD="youtube-dl"
fi
cmd_available mpv
cmd_available md5sum

mdebug() {
    echo "[$(date +%H:%M:%S)]:" "$@" >>/tmp/yt-play-debug.log
}

die() {
    printf '%s\n' "$1" >&2
    exit 1
}


CACHE_DIR="${XDG_CACHE_HOME:-$HOME/.cache}/yt-play"
mkdir -p "${CACHE_DIR}"

get_cache_filename() {
    local media_url="$1"
    local fname
    fname=$(echo "$media_url" | md5sum - | cut -d' ' -f1)

    echo "${CACHE_DIR}/${fname}"
}

check_cache() {
    local media_url="$1";
    local resolved_url="";
    local url_file;
    local title_and_url="";
    url_file=$(get_cache_filename "$1")
    if [[ -e "$url_file" ]]
    then
	title_and_url=$(cat "$url_file")
        resolved_url=${title_and_url#*___YT_PLAY___}
    fi

    if [[ -n "$resolved_url" ]] && curl --fail --head -X GET --silent -L --output /dev/null "$resolved_url"
    then
        echo -n "$title_and_url"
    fi
}

cache() {
    local media_url="$1"
    local play_url="$2"

    echo "$play_url" >"$(get_cache_filename "$media_url")"
}

get_track_info() {
    local media_url="$1"
    local caching="$2"
    local title_and_url=""

    if [[ "$caching" != "disabled" ]]
    then
        title_and_url=$(check_cache "$media_url")
    fi

    if [[ -z "$title_and_url" ]] || [[ "$caching" = "forced" ]]
    then
        #title_and_url=$("$YT_DL_CMD" --extract-audio --audio-format best --print '%(title)s___YT_PLAY___%(webpage_url)s' "$media_url")
        ## ugh this is bad but the print format doesn't seem to work directly, keeping this workaround for now
        title=$("$YT_DL_CMD" --extract-audio --audio-format best --get-title "$media_url")
        url=$("$YT_DL_CMD" --extract-audio --audio-format best --get-url "$media_url")
        title_and_url="${title}___YT_PLAY___${url}"
    fi

    if [[ "$caching" != "disabled" ]]
    then
        cache "$media_url" "$title_and_url"
    fi

    echo "$title_and_url"
}


PROGRAM_NAME="${0##*/}"
show_help() {
cat << EOF
Play the requested url as audio using mpv.
Uses youtube-dl/yt-dlp to extract the media url.

USAGE: ${PROGRAM_NAME} [-h|-?|--help] [-c|--cache  CACHING] [-s|--search SEARCH] URL

    -h          display this help and exit
    -c CACHING  enable, disable or force cache of urls.
                CACHING must be one of 'enable | disable | force'

    -s SEARCH   search for SEARCH in youtube and play the first found match
    URL         media url to be played. This is optional when a search term is passed.
EOF
}

media_urls=()
media_urls_idx=0
caching="enabled"

add_to_media_urls() {
    local url="$1";
    local url_prefix=""

    [[ "x${url:0:8}" != "xhttps://" ]] && url_prefix="ytsearch:"
    media_url="${url_prefix}${url}"
    media_urls[media_urls_idx]="$media_url"
    media_urls_idx=$(( ${media_urls_idx} + 1 ))
}

while [[ "$#" -gt 0 ]]
do
    case $1 in
        -h|-\?|--help)
            show_help
            exit
            ;;
        -c|--cache)
            if [[ "$#" -lt 2 ]] || [[ "$2" != @(enable|disable|force) ]]
            then
                die "ERROR: '$1' option expects one of enable | disable | force"
            fi

            caching="${2}d"
            shift
            ;;
        -s|--search)
            if [[ "$#" -lt 2 ]]
            then
                die "ERROR: a search term should follow '$1'"
            fi

            add_to_media_urls "$2";
            shift
            ;;
        -?*)
            printf 'WARN: Unknown option (ignored): %s\n' "$1" >&2
            ;;
        *)
            add_to_media_urls "$1"
            ;;
    esac

    shift
done

if [[ ${media_urls_idx} -eq 0 ]]
then
    die "ERROR: no media URL provided for playing. pass --help to see usage instructions"
fi

play() {
    local title_and_url
    local caching="$1"
    local playlist_file
    playlist_file=$(mktemp --suffix='___YT_PLAY___.XXXX')
    shift
    echo "#EXTM3U" > "$playlist_file"
    media_urls=("$@")
    for media_url in "${media_urls[@]}"
    do
        title_and_url=$(get_track_info "$media_url" "$caching")
        play_title=${title_and_url%___YT_PLAY___*}
        play_url=${title_and_url#*___YT_PLAY___}
        echo "#EXTINF:-1,${play_title}" >> "$playlist_file"
        echo "$play_url" >>"$playlist_file"
    done
    echo "Playing from $playlist_file"
    mpv --no-video --volume="100" --playlist="$playlist_file"
}

play "$caching" "${media_urls[@]}"
